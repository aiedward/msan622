grid.newpage()
pushViewport(viewport(layout=grid.layout(m, 3)
)
)
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
p<-plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
p<-plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
p
p<-plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues",vp=viewport(layout.pos.row=1, layout.pos.col=1))
print(plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues",vp=viewport(layout.pos.row=1, layout.pos.col=1)))
par(mfrow=c(m,3))
par(mfrow=c(m,3))
print(p, vp=viewport(layout.pos.row=i, layout.pos.col=j))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
m<-ceiling((1+plot_eigen)/3)
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
m<-ceiling((1+plot_eigen)/3)
m
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
for(i in 1:plot_eigen){
plot(evectors[,i],type="l")
}
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx][1:plot_eigen]
m<-ceiling((1+plot_eigen)/3)
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
for(i in 1:plot_eigen){
plot(evectors[,i],type="l")
}
evectors
evectors<-eigenL$vectors
evectors<-evectors[,idx[1:plot_eigen]]
m<-ceiling((1+plot_eigen)/3)
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
for(i in 1:plot_eigen){
plot(evectors[,i],type="l")
}
i
make_title<-paste(paste(i,"th"),"Eigenvectors")
make_title
make_title<-paste(paste(i,"th",sep=""),"Eigenvectors")
make_title
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
for(i in 1:plot_eigen){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors[,i],type="l",main=make_title,ylab="values")
}
evectors
kmeans(evectors)
kmeans(evectors,centers=2)
km<-kmeans(evectors,centers=k)
k=3
km<-kmeans(evectors,centers=k)
class<-km$class
class
names(km)
km$cluster
gaussian_dist<-function(x1,x2,sigma){
tmp<-sqrt(sum((x1-x2)^2))
y<-exp(-tmp/sigma^2)
return(y)
}
#similarity Matrix
similarity_mat<-function(x,sigma=1,num_eigen=3){
n<-dim(x)[1]
res<-matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
if(i>j){
res[i,j]<-gaussian_dist(x1=x[i,],x2=x[j,],sigma=sigma)
res[j,i]<-res[i,j]
}
}
}
max_sim<-max(apply(res,1,max))
res<-res/max_sim
return(res)
}
spectrulClustering<-function(x,sigma,plot_eigen,k){
#x is data
#sigma is sigma used in Gaussian function
#num_plot is how many eigenvalues are plotted from the smallest?
#k is the kmeans clustering's parameter
n<-dim(x)[1]
if(plot_eigen>n){
stop("Number of eigenvalues for plot is larger than the number of data points")
}else{
#Get W, D and L
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
#Calculate eigenvalues/vectors
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
#Order eigenvalues from the smallest to the largest
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
#Create Plot
m<-ceiling((1+plot_eigen)/3)
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
for(i in 1:plot_eigen){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors[,i],type="l",main=make_title,ylab="values")
}
km<-kmeans(evectors,centers=k)
cluster<-km$cluster
return(cluster)
}
spectrulClustering<-function(x,sigma,plot_eigen,k){
#x is data
#sigma is sigma used in Gaussian function
#num_plot is how many eigenvalues are plotted from the smallest?
#k is the kmeans clustering's parameter
n<-dim(x)[1]
if(plot_eigen>n){
stop("Number of eigenvalues for plot is larger than the number of data points")
}else{
#Get W, D and L
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
#Calculate eigenvalues/vectors
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
#Order eigenvalues from the smallest to the largest
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
#Create Plot
m<-ceiling((1+plot_eigen)/3)
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
for(i in 1:plot_eigen){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors[,i],type="l",main=make_title,ylab="values")
}
km<-kmeans(evectors,centers=k)
cluster<-km$cluster
return(cluster)
}
}
iris[1,]
dat<-iris[,1:4]
spectrulClustering(dat,sigma=3,plot_eigen=20,k=3)
spectrulClustering(dat,sigma=3,plot_eigen=5,k=3)
spectrulClustering(dat,sigma=3,plot_eigen=1,k=3)
x<-dat
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
L
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
evectors
evectors[1:10,]
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
evectors
plot_eigen
plot_eigen<-1
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
evectors
spectrulClustering<-function(x,sigma,plot_eigen,k){
#x is data
#sigma is sigma used in Gaussian function
#num_plot is how many eigenvalues are plotted from the smallest?
#k is the kmeans clustering's parameter
n<-dim(x)[1]
if(plot_eigen>n){
stop("Number of eigenvalues for plot is larger than the number of data points")
}else{
#Get W, D and L
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
#Calculate eigenvalues/vectors
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
#Order eigenvalues from the smallest to the largest
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
#Create Plot
m<-ceiling((1+plot_eigen)/3)
par(mfrow=c(m,3))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
if(plot_eigen==1){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors,type="l",main=make_title,ylab="values")
}else{
for(i in 1:plot_eigen){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors[,i],type="l",main=make_title,ylab="values")
}
}
km<-kmeans(evectors,centers=k)
cluster<-km$cluster
return(cluster)
}
}
spectrulClustering(dat,sigma=3,plot_eigen=1,k=3)
spectrulClustering<-function(x,sigma,plot_eigen,k){
#x is data
#sigma is sigma used in Gaussian function
#num_plot is how many eigenvalues are plotted from the smallest?
#k is the kmeans clustering's parameter
n<-dim(x)[1]
if(plot_eigen>n){
stop("Number of eigenvalues for plot is larger than the number of data points")
}else{
#Get W, D and L
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
#Calculate eigenvalues/vectors
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
#Order eigenvalues from the smallest to the largest
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
#Create Plot
m<-ceiling((1+plot_eigen)/2)
par(mfrow=c(m,2))
plot(evalues[order(evalues)],main="Eigenvalues",ylab="eigenvalues")
if(plot_eigen==1){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors,type="l",main=make_title,ylab="values")
}else{
for(i in 1:plot_eigen){
make_title<-paste(paste(i,"th",sep=""),"Eigenvector")
plot(evectors[,i],type="l",main=make_title,ylab="values")
}
}
km<-kmeans(evectors,centers=k)
cluster<-km$cluster
return(cluster)
}
}
spectrulClustering(dat,sigma=3,plot_eigen=1,k=3)
spectrulClustering<-function(x,sigma,plot_eigen,k){
#x is data
#sigma is sigma used in Gaussian function
#num_plot is how many eigenvalues are plotted from the smallest?
#k is the kmeans clustering's parameter
n<-dim(x)[1]
if(plot_eigen>n){
stop("Number of eigenvalues for plot is larger than the number of data points")
}else{
#Get W, D and L
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
#Calculate eigenvalues/vectors
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
#Order eigenvalues from the smallest to the largest
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
#K-means
km<-kmeans(evectors,centers=k)
cluster<-km$cluster
return(list(eigenvalues=evalues, eigenvectors= evectors, cluster=cluster))
}
}
spectrulClustering(dat,sigma=3,plot_eigen=1,k=3)
gaussian_dist<-function(x1,x2,sigma){
tmp<-sqrt(sum((x1-x2)^2))
y<-exp(-tmp/sigma^2)
return(y)
}
#similarity Matrix
similarity_mat<-function(x,sigma=1,num_eigen=3){
n<-dim(x)[1]
res<-matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
if(i>j){
res[i,j]<-gaussian_dist(x1=x[i,],x2=x[j,],sigma=sigma)
res[j,i]<-res[i,j]
}
}
}
max_sim<-max(apply(res,1,max))
res<-res/max_sim
return(res)
}
spectrulClustering<-function(x,sigma,plot_eigen,k){
#x is data
#sigma is sigma used in Gaussian function
#num_plot is how many eigenvalues are plotted from the smallest?
#k is the kmeans clustering's parameter
n<-dim(x)[1]
if(plot_eigen>n){
stop("Number of eigenvalues for plot is larger than the number of data points")
}else{
#Get W, D and L
W<-similarity_mat(x,sigma=sigma)
D<-diag(apply(W,1,sum))
L<-D-W
#Calculate eigenvalues/vectors
eigenL<-eigen(L)
evalues<-eigenL$values
evectors<-eigenL$vectors
#Order eigenvalues from the smallest to the largest
idx<-order(evalues)
evalues<-evalues[idx][1:plot_eigen]
evectors<-evectors[,idx[1:plot_eigen]]
#K-means
km<-kmeans(evectors,centers=k)
cluster<-km$cluster
return(list(eigenvalues=evalues, eigenvectors= evectors, cluster=cluster))
}
}
?dist
dist(x,"euclidean", diag = TRUE, upper = TRUR)
x<-matrix(c(1,2,
1,4,
5,6,
8,9,
2,2),ncol=2)
x
dist(x)
dist(x,"euclidean", diag = TRUE, upper = TRUR)
dist(x,"euclidean", diag = TRUE, upper = TRUE)
d<-dist(x,"euclidean", diag = TRUE, upper = TRUE)
d
d[,1]
d[1,1]
d
class(d)
d<-as.matrix(d)
d
d[1]
d[1,1]
d[1,]
d<-dist(x,"euclidean", diag = FALSE, upper = TRUE)
d<-as.matrix(d)
d
d[,1]
order(d[,1])
order(d[,1]) !=1
idx<-order(d[,1])
idx<-idx[idx!=1]
ix
idx
idx<-order(d[,1])
idx<-idx[idx!=1][1:k]
k<-2
idx<-idx[idx!=1][1:k]
idx
n<-dim(x)[1]
res<-matrix(0,n,n)
res[i,idx]
i<-1
res[i,idx]
res[i,idx]<-1
res
res[idx,i]<-1
res
knn_mat<-function(x,k){
n<-dim(x)[1]
res<-matrix(0,n,n)
d<-dist(x,"euclidean", diag = FALSE, upper = TRUE)
d<-as.matrix(d)
for(i in 1:n){
idx<-order(d[,i])
idx<-idx[idx!=i][1:k]
res[i,idx]<-1
res[idx,i]<-1
}
return(res)
}
knn_mat(x,k=2)
x<-matrix(c(1,2,
1,4,
5,6,
8,9,
2,2),ncol=2)
x
source("Documents/MSAN/MVA/spectrul_clustering.R")
spectrulClustering(x,similarity="Knn",k=3,plot_eigen=3,centers=2)
source("Documents/MSAN/MVA/spectrul_clustering.R")
spectrulClustering(x,similarity="Knn",k=3,plot_eigen=3,centers=2)
x<-matrix(c(1,2,
1,4,
10,10,
10,9,
11,12),ncol=2)
spectrulClustering(x,similarity="Knn",k=3,plot_eigen=3,centers=2)
x<-matrix(c(1,2,1
1,4,1
10,10,10
10,9,10
11,12,10),ncol=2)
x<-matrix(c(1,2,1,
1,4,1,
10,10,10
10,9,10
11,12,10),ncol=3)
x<-matrix(c(1,2,1,
1,4,1,
10,10,10,
10,9,10,
11,12,10),ncol=3, byrow=T)
x
spectrulClustering(x,similarity="Knn",k=3,plot_eigen=3,centers=2)
x<-iris[,1:4]
x[1,]
plot(x[,1:2])
spectrulClustering(x,similarity="Knn",k=3,plot_eigen=3,centers=2)
spectrulClustering(x,similarity="Knn",k=3,plot_eigen=3,centers=3)
setwd("Documents/MSAN/Data_Visalization/msan622/final-project/")
data<-read.csv("bank-full.csv")
data[1,]
data<-read.csv("bank-full.csv",sep=";")
data[1,]
view(data)
views(data)
View(data)
runApp()
library(shiny)
runApp()
data
x_var<-"duration"
y_var<-"age"
x_idx<-which(colnames(data)==x_var)
y_idx<-which(colnames(data)==y_var)
z_idx<-which(colnames(data)=="subscribed")
data3<-as.data.frame(data[,c(x_idx,y_idx,z_idx)])
colourList<-setNames(c("#E41A1C", "#377EB8"),levels(data$subscribed))
make_title<-paste("Heat Map",paste(x_var,y_var,sep = " and "),sep=" ")
breaks<-c(breaks_x,breaks_y)
breaks_x = 1-
breaks_x = 10
breaks_y = 10
breaks<-c(breaks_x,breaks_y)
for(i in 1:2){
if(is.numeric(data3[,i])){
data3<-discretize(data3=data3,idx=i,breaks=breaks[i])
}
}
idx
i<-1
idx<-1
min_digit<-floor(log10(abs(min(data3[,idx]))))
max_digit<-floor(log10(max(abs(data3[,idx]))))
min_digit
max_digit
summary(duration)
summary(data$duration)
min_dat<-min(data3[,idx])
max_dat<-max(data3[,idx])
if(min_dat==0){
min_dat<-1
}
if(max_dat==0){
max_dat<-1
}
min_digit<-floor(log10(abs(min_dat)))
min_digit
max_digit<-floor(log10(abs(max_dat)))
digit<-10^min(min_digit,max_digit)
min_dat<-floor(min(data3[,idx])/digit)*digit
max_dat<-ceiling(max(data3[,idx])/digit)*digit
min_dat
max_dat
bin<-(max_dat-min_dat)/breaks
disc_breaks<-seq(min_dat,max_dat,bin)
disc_labels<-NULL
min_dat
max_dat
bin
breaks=10
bin<-(max_dat-min_dat)/breaks
disc_breaks<-seq(min_dat,max_dat,bin)
disc_labels<-NULL
for(i in 2:length(disc_breaks)){
tmp_lab<-paste(round(disc_breaks[i-1]),round(disc_breaks[i]),sep = "\n to ")
disc_labels<-c(disc_labels,tmp_lab)
}
data3[,idx]<-cut(data3[,idx],breaks=disc_breaks,labels = disc_labels, ordered_result=TRUE, include.lowest=TRUE)
data3
runApp()
runApp()
runApp()
runApp()
runApp()
