coef_scale<-data_glm_scale_summary$coef
significance_scale<-ifelse(coef_scale[,4]<0.001,"p-value < 0.1%",
ifelse((coef_scale[,4] < 0.01) & (coef_scale[,4]>=0.001), "p-value < 1%",
ifelse((coef_scale[,4] < 0.05) & (coef_scale[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
imp_scale<-data.frame(Importance = coef_scale[,1])
importanceData_scale<-data.frame(variable_name = factor(row.names(imp_scale),levels=row.names(imp_scale)),
Importance = as.numeric(imp_scale[,1]),
significance = factor(as.character(significance_scale), level = c("p-value < 0.1%","p-value < 1%","p-value < 5%","p-value >=5%")))
#Predict
#y_pred<-ifelse(predict(data_glm,newdata=df[-idx,],type="response")>cut_prob,"no","yes")
data_mm_test<-model.matrix(data_glm$formula,data=df[-idx,])
y_test<-y[-idx]
#table(,y_pred)
return(list(data_mm=data_mm_test,
y = y_test,
importanceData=importanceData,
std_coef=importanceData_scale,
coef=coef))
}
logistic_reg(data,x_var,y_var,cut_prob=0.5)
idx<-sample(1:dim(data)[1],dim(data)[1]*train_size)
#Prepare dataset
x_idx<-which(colnames(data) %in% x_var)
y_idx<-which(colnames(data) == y_var)
x<-data[,x_idx]
y<-data[,y_idx]
df<-cbind(y,x)
colnames(df)[1]<-"subscribed"
#Fitted GLM (normal)
data_glm<-glm(subscribed~.,data=df[idx,],family="binomial")
data_glm_summary<-summary(data_glm)
coef<-data_glm_summary$coef
significance<-ifelse(coef[,4]<0.001,"p-value < 0.1%",
ifelse((coef[,4] < 0.01) & (coef[,4]>=0.001), "p-value < 1%",
ifelse((coef[,4] < 0.05) & (coef[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
data_mm<-model.matrix(data_glm)
df_scale<-as.data.frame(cbind(y[idx],data_mm))
colnames(df_scale)[1]<-"subscribed"
#Fitted GLM (standardized)
data_glm_scale<-glm(subscribed~.,data=df_scale[idx,],family="binomial")
data_glm_scale_summary<-summary(data_glm_scale)
df_scale[1,]
y[idx]
y<-data.frame(data[,y_idx])
y[1,]
y[1:10,]
df<-cbind(y,x)
df[1,]
df<-cbind(y,x)
colnames(df)[1]<-"subscribed"
df[1,]
y[idx]
y<-data[,y_idx]
df_scale<-as.data.frame(cbind(y[idx],scale(data_mm)))
df_scale[1,]
df_scale<-cbind(y[idx],as.data.frame(scale(data_mm[,-1])))
df_scale[1,:]
df_scale[1,]
colnames(df_scale)[1]<-"subscribed"
data_glm_scale<-glm(subscribed~.,data=df_scale[idx,],family="binomial")
data_mm<-model.matrix(data_glm)
df_scale<-cbind(y,as.data.frame(scale(data_mm[,-1])))
data_mm<-model.matrix(data_glm)
df_scale<-as.data.frame(cbind(y[idx],as.data.frame(scale(data_mm[,-1]))))
colnames(df_scale)[1]<-"subscribed"
data_glm_scale<-glm(subscribed~.,data=df_scale,family="binomial")
data_glm_scale_summary<-summary(data_glm_scale)
coef_scale<-data_glm_scale_summary$coef
significance_scale<-ifelse(coef_scale[,4]<0.001,"p-value < 0.1%",
ifelse((coef_scale[,4] < 0.01) & (coef_scale[,4]>=0.001), "p-value < 1%",
ifelse((coef_scale[,4] < 0.05) & (coef_scale[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
imp_scale<-data.frame(Importance = coef_scale[,1])
importanceData_scale<-data.frame(variable_name = factor(row.names(imp_scale),levels=row.names(imp_scale)),
Importance = as.numeric(imp_scale[,1]),
significance = factor(as.character(significance_scale), level = c("p-value < 0.1%","p-value < 1%","p-value < 5%","p-value >=5%")))
#Predict
#y_pred<-ifelse(predict(data_glm,newdata=df[-idx,],type="response")>cut_prob,"no","yes")
data_mm_test<-model.matrix(data_glm$formula,data=df[-idx,])
y_test<-y[-idx]
#table(,y_pred)
y_test
logistic_reg<-function(data,x_var,y_var,train_size=0.8,cut_prob=0.5){
#Samping
idx<-sample(1:dim(data)[1],dim(data)[1]*train_size)
#Prepare dataset
x_idx<-which(colnames(data) %in% x_var)
y_idx<-which(colnames(data) == y_var)
x<-data[,x_idx]
y<-data[,y_idx]
df<-cbind(y,x)
colnames(df)[1]<-"subscribed"
#Fitted GLM (normal)
data_glm<-glm(subscribed~.,data=df[idx,],family="binomial")
data_glm_summary<-summary(data_glm)
coef<-data_glm_summary$coef
significance<-ifelse(coef[,4]<0.001,"p-value < 0.1%",
ifelse((coef[,4] < 0.01) & (coef[,4]>=0.001), "p-value < 1%",
ifelse((coef[,4] < 0.05) & (coef[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
#Scale dataset
data_mm<-model.matrix(data_glm)
df_scale<-as.data.frame(cbind(y[idx],as.data.frame(scale(data_mm[,-1]))))
colnames(df_scale)[1]<-"subscribed"
#Fitted GLM (standardized)
data_glm_scale<-glm(subscribed~.,data=df_scale,family="binomial")
data_glm_scale_summary<-summary(data_glm_scale)
coef_scale<-data_glm_scale_summary$coef
significance_scale<-ifelse(coef_scale[,4]<0.001,"p-value < 0.1%",
ifelse((coef_scale[,4] < 0.01) & (coef_scale[,4]>=0.001), "p-value < 1%",
ifelse((coef_scale[,4] < 0.05) & (coef_scale[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
imp_scale<-data.frame(Importance = coef_scale[,1])
importanceData_scale<-data.frame(variable_name = factor(row.names(imp_scale),levels=row.names(imp_scale)),
Importance = as.numeric(imp_scale[,1]),
significance = factor(as.character(significance_scale), level = c("p-value < 0.1%","p-value < 1%","p-value < 5%","p-value >=5%")))
#Predict
#y_pred<-ifelse(predict(data_glm,newdata=df[-idx,],type="response")>cut_prob,"no","yes")
data_mm_test<-model.matrix(data_glm$formula,data=df[-idx,])
y_test<-y[-idx]
#table(,y_pred)
return(list(data_mm=data_mm_test,
y = y_test,
importanceData=importanceData,
std_coef=importanceData_scale,
coef=coef))
}
logistic_reg(data,x_var,y_var,cut_prob=0.5)
glm_res<-logistic_reg(data,x_var,y_var,cut_prob=0.5)
get_ImportancePlot<-function(importanceData,decreasing=FALSE,title=NULL, y_lab=NULL){
sortOrder<-order(importanceData$Importance,decreasing=decreasing)
fact_level<-levels(importanceData$variable_name)
importanceData$variable_name<-factor(importanceData$variable_name,levels=fact_level[sortOrder])
p<-ggplot(importanceData)+geom_bar(aes(x=variable_name,y=Importance, fill = significance),stat="identity")+coord_flip()
p<-p+labs(title = title, y=y_lab)
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.8,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.1,linetype="dotted"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_blank(),
axis.text.y=element_text(size=16,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 3)))
print(p)
}
get_ImportancePlot(glm_res$importanceData)
glm_res$importanceData
names(glm_res)
importanceData<-glm_res$importanceData
sortOrder<-order(importanceData$Importance,decreasing=decreasing)
decreasing=FALSE
sortOrder<-order(importanceData$Importance,decreasing=decreasing)
fact_level<-levels(importanceData$variable_name)
importanceData$variable_name<-factor(importanceData$variable_name,levels=fact_level[sortOrder])
importanceData
importanceData[,1]
fact_level
sortOrder<-order(importanceData$Importance,decreasing=decreasing)
fact_level<-levels(importanceData$variable_name)
importanceData$variable_name<-factor(importanceData$variable_name,levels=fact_level[sortOrder])
p<-ggplot(importanceData)+geom_bar(aes(x=variable_name,y=Importance, fill = significance),stat="identity")+coord_flip()
p<-p+labs(title = title, y=y_lab)
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.8,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.1,linetype="dotted"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_blank(),
axis.text.y=element_text(size=16,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 3)))
print(p)
importanceData[,1]
importanceData<-glm_res$importanceData
importanceData
importanceData[,1]
rm(importanceData)
glm_res$importanceData
coef
coef_scale
logistic_reg<-function(data,x_var,y_var,train_size=0.8,cut_prob=0.5){
#Samping
idx<-sample(1:dim(data)[1],dim(data)[1]*train_size)
#Prepare dataset
x_idx<-which(colnames(data) %in% x_var)
y_idx<-which(colnames(data) == y_var)
x<-data[,x_idx]
y<-data[,y_idx]
df<-cbind(y,x)
colnames(df)[1]<-"subscribed"
#Fitted GLM (normal)
data_glm<-glm(subscribed~.,data=df[idx,],family="binomial")
data_glm_summary<-summary(data_glm)
coef<-data_glm_summary$coef
#Scale dataset
data_mm<-model.matrix(data_glm)
df_scale<-as.data.frame(cbind(y[idx],as.data.frame(scale(data_mm[,-1]))))
colnames(df_scale)[1]<-"subscribed"
#Fitted GLM (standardized)
data_glm_scale<-glm(subscribed~.,data=df_scale,family="binomial")
data_glm_scale_summary<-summary(data_glm_scale)
coef_scale<-data_glm_scale_summary$coef
significance_scale<-ifelse(coef_scale[,4]<0.001,"p-value < 0.1%",
ifelse((coef_scale[,4] < 0.01) & (coef_scale[,4]>=0.001), "p-value < 1%",
ifelse((coef_scale[,4] < 0.05) & (coef_scale[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
imp_scale<-data.frame(Importance = coef_scale[-1,1])
importanceData_scale<-data.frame(variable_name = factor(row.names(imp_scale),levels=row.names(imp_scale)),
Importance = as.numeric(imp_scale[,1]),
significance = factor(as.character(significance_scale), level = c("p-value < 0.1%","p-value < 1%","p-value < 5%","p-value >=5%")))
#Predict
#y_pred<-ifelse(predict(data_glm,newdata=df[-idx,],type="response")>cut_prob,"no","yes")
data_mm_test<-model.matrix(data_glm$formula,data=df[-idx,])
y_test<-y[-idx]
#table(,y_pred)
return(list(data_mm=data_mm_test,
y = y_test,
importanceData=importanceData_scale,
coef=coef))
}
glm_res<-logistic_reg(data,x_var,y_var,cut_prob=0.5)
imp_scale<-data.frame(Importance = coef_scale[-1,1])
imp_scale
coef_scale<-data_glm_scale_summary$coef
coef_scale[1,]
coef_scale
coef_scale[-1,]
logistic_reg<-function(data,x_var,y_var,train_size=0.8,cut_prob=0.5){
#Samping
idx<-sample(1:dim(data)[1],dim(data)[1]*train_size)
#Prepare dataset
x_idx<-which(colnames(data) %in% x_var)
y_idx<-which(colnames(data) == y_var)
x<-data[,x_idx]
y<-data[,y_idx]
df<-cbind(y,x)
colnames(df)[1]<-"subscribed"
#Fitted GLM (normal)
data_glm<-glm(subscribed~.,data=df[idx,],family="binomial")
data_glm_summary<-summary(data_glm)
coef<-data_glm_summary$coef
#Scale dataset
data_mm<-model.matrix(data_glm)
df_scale<-as.data.frame(cbind(y[idx],as.data.frame(scale(data_mm[,-1]))))
colnames(df_scale)[1]<-"subscribed"
#Fitted GLM (standardized)
data_glm_scale<-glm(subscribed~.,data=df_scale,family="binomial")
data_glm_scale_summary<-summary(data_glm_scale)
coef_scale<-data_glm_scale_summary$coef[-1,]
significance_scale<-ifelse(coef_scale[,4]<0.001,"p-value < 0.1%",
ifelse((coef_scale[,4] < 0.01) & (coef_scale[,4]>=0.001), "p-value < 1%",
ifelse((coef_scale[,4] < 0.05) & (coef_scale[,4]>=0.01),"p-value < 5%", "p-value >=5%")))
imp_scale<-data.frame(Importance = coef_scale[,1])
importanceData_scale<-data.frame(variable_name = factor(row.names(imp_scale),levels=row.names(imp_scale)),
Importance = as.numeric(imp_scale[,1]),
significance = factor(as.character(significance_scale), level = c("p-value < 0.1%","p-value < 1%","p-value < 5%","p-value >=5%")))
#Predict
#y_pred<-ifelse(predict(data_glm,newdata=df[-idx,],type="response")>cut_prob,"no","yes")
data_mm_test<-model.matrix(data_glm$formula,data=df[-idx,])
y_test<-y[-idx]
#table(,y_pred)
return(list(data_mm=data_mm_test,
y = y_test,
importanceData=importanceData_scale,
coef=coef))
}
glm_res<-logistic_reg(data,x_var,y_var,cut_prob=0.5)
importanceData<-glm_res$importanceData
get_ImportancePlot(glm_res$importanceData)
get_DecisionBoundary<-function(data_mm, y, coef, x1_var,x2_var,cut_prob=0.5){
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data_mdf<-cbind(y,as.data.frame(data_mm[,-1]))
colnames(data_mdf)[1]<-"subscribed"
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=data$subscribed),data4))
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes(x=data4[,2],y=data4[,3],col=data4[,1]),alpha=0.4,size=3)+
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2))
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
}
get_DecisionBoundary(data_mm=glm_res$data_mm,y=glm_res$y,x1_var="age",x2_var="duration")
x1_idx<-which(colnames(data_mm) == x1_var)
x1_var="age"
x2_var="duration"
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
data_mm<-glm_res$data_mm
coef<-glm_res$coef
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
y<-glm_res$y
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
log_odds<-log((1-cut_prob)/cut_prob)
cut_prob=0.5
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes(x=data4[,2],y=data4[,3],col=data4[,1]),alpha=0.4,size=3)+
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2))
p<-ggplot()+geom_point(data=data4, aes(x=data4[,2],y=data4[,3],col=data4[,1]),alpha=0.4,size=3)
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2))
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
}
p
data4[1,]
get_DecisionBoundary<-function(data_mm, y, coef, x1_var,x2_var,cut_prob=0.5){
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
colnames(data4)<-c("subscribed")
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes_string(x=x1_var,y=x2_var,col="subscribed"),alpha=0.4,size=3)
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2))
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
}
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="day")
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="day",coef=coef)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef)
colnames(data_mm)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef)
x1_var="duration"
x2_var="balance"
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
colnames(data4)<-c("subscribed")
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes_string(x=x1_var,y=x2_var,col="subscribed"),alpha=0.4,size=3)
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2))
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
data4[1,]
get_DecisionBoundary<-function(data_mm, y, coef, x1_var,x2_var,cut_prob=0.5){
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
colnames(data4)<-c("subscribed",x1_var,x2_var)
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes_string(x=x1_var,y=x2_var,col="subscribed"),alpha=0.4,size=3)
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2))
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
}
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.9)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.2)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.01)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.1)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.99)
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.5)
get_DecisionBoundary<-function(data_mm, y, coef, x1_var,x2_var,cut_prob=0.5){
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
colnames(data4)<-c("subscribed",x1_var,x2_var)
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes_string(x=x1_var,y=x2_var,col="subscribed"),alpha=0.4,size=3)
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2,size=5,col="red"))
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
}
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.5)
get_DecisionBoundary<-function(data_mm, y, coef, x1_var,x2_var,cut_prob=0.5){
x1_idx<-which(colnames(data_mm) == x1_var)
x2_idx<-which(colnames(data_mm) == x2_var)
dummy_vect<-apply(data_mm,2,FUN=median)
dummy_vect[x1_idx]<-0
dummy_vect[x2_idx]<-0
data4<-data_mm[,c(x1_idx,x2_idx)]
data4<-as.data.frame(cbind(data.frame(subscribed=y),data4))
colnames(data4)<-c("subscribed",x1_var,x2_var)
log_odds<-log((1-cut_prob)/cut_prob)
sim_x1<-seq(min(data4[,2]),max(data4[,2]))
sim_x2<-(-coef[,1] %*% dummy_vect - sim_x1*coef[x1_idx,1] - log_odds) / coef[x2_idx,1]
data5<-data.frame(sim_x1=sim_x1,sim_x2 = sim_x2)
p<-ggplot()+geom_point(data=data4, aes_string(x=x1_var,y=x2_var,col="subscribed"),alpha=0.4,size=3)
p<-p+geom_line(data=data5,aes(x=sim_x1,y=sim_x2),size=5,col="red")
p<-p+theme(panel.background = element_rect(fill="white",colour="black"),
panel.grid.major.x = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.x = element_line(color="gray",size=0.2,linetype="dotted"),
panel.grid.major.y = element_line(color="gray",size=0.5,linetype="dotted"),
panel.grid.minor.y = element_line(color="gray",size=0.2,linetype="dotted"),
plot.title = element_text(size=20),
axis.title.x = element_text(size=16,colour="black"),
axis.title.y = element_text(size=16,colour="black"),
axis.text.y=element_text(size=14,colour="black"),
axis.text.x=element_text(size=14,colour="black"),
legend.title = element_text(size=16),
legend.text = element_text(size=14),
legend.key = element_rect(fill = "White"))+guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
}
get_DecisionBoundary(data_mm,y,x1_var="duration",x2_var="balance",coef=coef,cut_prob=0.5)
